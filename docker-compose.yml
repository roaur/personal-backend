services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/initdb:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
      retries: 10

  postgres_airflow:
    image: postgres:17
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AIRFLOW_POSTGRES_USER} -d ${AIRFLOW_POSTGRES_DB}"]
      interval: 1s
      retries: 10

  fastapi:
    build: 
      context: .
      dockerfile: ./fastapi/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`${FASTAPI_ROUTE}`)"
      - "traefik.http.services.fastapi.loadbalancer.server.port=8000" # FastAPI's internal port
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      SQLALCHEMY_DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"

  airflow-scheduler:
    build: 
      context: .
      dockerfile: ./airflow/Dockerfile
    depends_on:
      postgres_airflow:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@postgres_airflow/${AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW_FERNET_KEY}'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__WEBSERVER__WORKERS: 4
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/utils:/opt/airflow/utils
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    entrypoint: >
      bash -c "
      airflow db init &&
      airflow scheduler"

  airflow-webserver:
    build: 
      context: .
      dockerfile: ./airflow/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.airflow.rule=Host(`${AIRFLOW_ROUTE}`)"
      - "traefik.http.services.airflow.loadbalancer.server.port=8080" # Airflow's internal port
    depends_on:
      postgres_airflow:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@postgres_airflow/${AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW_FERNET_KEY}'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW_WEB_USERNAME: ${AIRFLOW_WEB_USERNAME}
      AIRFLOW_WEB_PASSWORD: ${AIRFLOW_WEB_PASSWORD}
      AIRFLOW_WEB_FIRST_NAME: ${AIRFLOW_WEB_FIRST_NAME}
      AIRFLOW_WEB_LAST_NAME: ${AIRFLOW_WEB_LAST_NAME}
      AIRFLOW_WEB_ROLE: ${AIRFLOW_WEB_ROLE}
      AIRFLOW_WEB_EMAIL: ${AIRFLOW_WEB_EMAIL}
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/utils:/opt/airflow/utils
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    entrypoint: >
      bash -c "
      sleep 5 &&
      airflow db init &&
      airflow users create --username ${AIRFLOW_WEB_USERNAME} --password ${AIRFLOW_WEB_PASSWORD} --firstname ${AIRFLOW_WEB_FIRST_NAME} --lastname ${AIRFLOW_WEB_LAST_NAME} --role ${AIRFLOW_WEB_ROLE} --email ${AIRFLOW_WEB_EMAIL} &&
      airflow webserver"

  traefik:
    image: traefik:v3.2
    container_name: traefik
    command:
      - "--api.insecure=true" # Enable Traefik dashboard (disable in production!)
      - "--providers.docker=true" # Enable Docker provider
      - "--entrypoints.web.address=:80" # HTTP entrypoint
    ports:
      - "80:80" # Expose Traefik on port 80
      - "8081:8080" # Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Allow Traefik to watch Docker
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml" # Correctly map the file

volumes:
  airflow_logs:
  airflow_plugins:
  postgres_data:
  postgres_airflow_data:
